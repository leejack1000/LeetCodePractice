/*
Problem:

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
 
public class Solution
{
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2)
    {      
        ListNode firstNode = null;
        ListNode node = null;
        int buff = 0;
        while(null != l1
                ||null != l2
                || 0 != buff
                )
        {
            int totalValue = 0;
            if(null != l1)
            {
                totalValue += l1.val;
                l1 = l1.next;
            }
            if(null != l2)
            {
                totalValue += l2.val;
                l2 = l2.next;
            }
            int val = (totalValue % 10) + buff;
            if(null == node)
            {
                node = new ListNode(val % 10);
                firstNode = node;
            }
            else
            {
                ListNode newNode = new ListNode(val % 10);
                node.next = newNode;
                node = newNode;
            }
            buff = (int)(totalValue * 0.1f);
            buff += (int)(val * 0.1f);
        }
        
        return firstNode;
    }
}